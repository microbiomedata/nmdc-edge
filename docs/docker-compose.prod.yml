version: "3"

###############################################################################
#
# Usage (on a VM):
#
# 1. Ensure the necessary persistent volumes exists and are accessible:
#    $ stat /media/volume/nmdc-edge-web-app-mongo-data
#    $ stat /media/volume/nmdc-edge-web-app-io-data
#
# 2. Set environment variables or populate the relevant `.env` file(s).
#    $ export JWT_SECRET='...'
#    $ export OAUTH_SECRET='...'
#    $ export EMAIL_SHARED_SECRET='...'
#    $ export DATABASE_USERNAME='...'
#    $ export DATABASE_PASSWORD='...'
#
#    # (Optional) Override default values:
#    $ export APP_IMAGE='...'
#    $ export APP_EXTERNAL_HOSTNAME='...'
#    $ export APP_INTERNAL_HOSTNAME='...'
#    $ export IO_BASE_DIR_ON_HOST='...'
#    $ export MONGO_DATA_DIR_ON_HOST='...'
#    $ export CROMWELL_API_BASE_URL='...'
#    $ export WORKFLOWS_TEMPLATE_DIR='...'
#    $ export WORKFLOWS_WDL_DIR='...'
#
#    # Note: You can generate a random 20-character string by running:
#    $ openssl rand -base64 20
#
# 3. Spin up the stack.
#    $ docker compose up --detach
#
#    # (Optional) View container logs.
#    $ docker compose logs -f app
#    $ docker compose logs -f mongo
#    $ docker compose logs -f nginx
#
###############################################################################

services:
  app:
    container_name: app
    # Reference: https://github.com/microbiomedata/nmdc-edge/pkgs/container/nmdc-edge-web-app
    image: ${APP_IMAGE:-ghcr.io/microbiomedata/nmdc-edge-web-app:commit-ff4a1fe2-node20-amd64}
    # Alternatively, to build an image from a Dockerfile (which will allow you to specify args at build time):
    #build:
    #  context: /path/to/repository/root/directory
    #  dockerfile: Dockerfile
    #  args:
    #    - USER_ID: ${USER_ID:-60005}
    #    - GROUP_ID: ${GROUP_ID:-60005}
    #    - USER_NAME: ${USER_NAME:-webuser}
    #    - GROUP_NAME: ${GROUP_NAME:-webuser}
    restart: unless-stopped
    ports:
      - "8000:${APP_SERVER_PORT:-5000}"
    # When the container host is Linux, this makes it so containers can access the host via `host.docker.internal`.
    # Reference: https://github.com/docker/for-linux/issues/264#issuecomment-784985736
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ${IO_BASE_DIR_ON_HOST:-/media/volume/nmdc-edge-web-app-io-data}:/project/io
    environment:
      DATABASE_HOST: mongo
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      CROMWELL_API_BASE_URL: ${CROMWELL_API_BASE_URL}
      APP_EXTERNAL_BASE_URL: https://${APP_EXTERNAL_HOSTNAME:-edge-dev.microbiomedata.org}
      # Set `IO_BASE_DIR` to the path at which the persistent volume is mounted (see `volumes` above).
      IO_BASE_DIR: /project/io
      WORKFLOWS_TEMPLATE_DIR: ${WORKFLOWS_TEMPLATE_DIR:-/project/io/nmdc-edge/data/workflow/templates}
      WORKFLOWS_WDL_DIR: ${WORKFLOWS_WDL_DIR:-/project/io/nmdc-edge/data/workflow/WDL}
      # These lines tell Docker to populate these _container_ environment variables (on left)
      # with the values of the corresponding _host_ environment variables (on right).
      JWT_SECRET: ${JWT_SECRET}
      OAUTH_SECRET: ${OAUTH_SECRET}
      EMAIL_SHARED_SECRET: ${EMAIL_SHARED_SECRET}
    depends_on:
      - mongo
      - nginx

  mongo:
    image: mongo:6.0.4
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "27017:27017"
    # Map a persistent volume to `/data/db` within the container.
    volumes:
      - ${MONGO_DATA_DIR_ON_HOST:-/media/volume/nmdc-edge-web-app-mongo-data}:/data/db

  nginx:
    image: nginx  # docs: https://hub.docker.com/_/nginx
    restart: unless-stopped
    environment:
      # Note: The `SERVER_NAME` environment variable contains the hostname that Cloudflare, itself, uses
      #       to access our web server. This is typically something provided by the infrastructure provider
      #       (e.g. Jetstream2). This may be different from the hostname that end users use to access our
      #       web server via Cloudflare (which then proxies their requests to our web server).
      #       Here's a graphical representation showing where different hostnames come into play:
      #       User → "External hostname" → Cloudflare → "Internal hostname" (this) → Nginx → Web app
      #
      SERVER_NAME: ${APP_INTERNAL_HOSTNAME:-nmdc-test.mcb180107.projects.jetstream-cloud.org}
      PROXY_TARGET_HOSTNAME: app
      PROXY_TARGET_PORT: ${APP_SERVER_PORT:-5000}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Put a shell script into the folder the container will check for upon startup.
      # Reference: https://github.com/nginxinc/docker-nginx/blob/f0fc31f0f73d59cc46e16fae973065a6aea63c15/entrypoint/docker-entrypoint.sh#L16
      - ./create_ssl_cert.sh:/docker-entrypoint.d/create_ssl_cert.sh
      # Note: The container will replace the environment variable references within the template, with their values
      #       defined in the `environment` section above, and store the result at `/etc/nginx/conf.d/default.conf`.
      - ./nginx-default.conf.template:/etc/nginx/templates/default.conf.template
