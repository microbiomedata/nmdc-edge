version 1.0

import "https://raw.githubusercontent.com/microbiomedata/ReadsQC/refs/tags/v1.0.15/shortReadsqc.wdl" as readsQC
import "readsqc_preprocess.wdl" as readsqc_preprocess
import "readsqc_output.wdl" as readsqc_output
import "https://raw.githubusercontent.com/microbiomedata/ReadbasedAnalysis/v1.0.8/ReadbasedAnalysis.wdl" as readbasedAnalysis
import "readbasedanalysis_preprocess.wdl" as readbasedanalysis_preprocess
import "readbasedAnalysis_output.wdl" as readbasedAnalysis_output
import "nmdcEDGE_assembly.wdl" as metaAssembly
import "https://raw.githubusercontent.com/microbiomedata/mg_annotation/refs/tags/v1.1.4/annotation_full.wdl" as metaAnnotation
import "annotation_output.wdl" as metaAnnotationOutput
import "https://raw.githubusercontent.com/microbiomedata/metaMAGs/v1.3.10/mbin_nmdc.wdl" as metaMAGs
import "viral-plasmid_wf.wdl" as viralPlasmid
import "mbin_nmdc_output.wdl" as metaMAGsOutput

workflow main_workflow {
    input {
        # ReadsQC
        Array[File] input_files
        String      readsQC_outdir
        Boolean     input_interleaved = true
        Array[File] input_fq1=[]
        Array[File] input_fq2=[]
        String      readsQC_database="/refdata"
        String      proj = "metagenome_workflow"
        String      readsQC_vis_container="microbiomedata/fastqc_vis:1.0"
        Array[File] rqcfiltered_reads = nmdc_rqcfilter_call.filtered_final
        # ReadbasedAnalysis
        Map[String, Boolean] readbasedAnalysis_enabled_tools = {
            "gottcha2": true,
            "kraken2": true,
            "centrifuge": true
        }
        Int     readbasedAnalysis_cpu = 4
        String  readbasedAnalysis_prefix
        String  readbasedAnalysis_outdir
        Boolean readbasedAnalysis_paired = false
        String  ReadbasedAnalysis_container = "microbiomedata/nmdc_taxa_profilers:1.0.5"
        String  readsQC_bbtools_container="microbiomedata/bbtools:38.96"
        String  db_gottcha2 = "/refdata/GOTTCHA2_fungal/gottcha_db.BAVFPt.species.fna"
        String  db_kraken2 = "/refdata/Kraken2"
        String  db_centrifuge = "/refdata/Centrifuge/hpv"
        # MetaAssembly
        String  metaAssembly_outdir
        String  metaAssembly_rename_contig_prefix="scaffold"
        Float   metaAssembly_uniquekmer=1000
        String  metaAssembly_bbtools_container="microbiomedata/bbtools:38.96"
        String  metaAssembly_spades_container="microbiomedata/spades:3.15.0"
        String  metaAssembly_quast_container="staphb/quast:5.2.0-slim"
        String  metaAssembly_memory="100g"
        String  metaAssembly_threads="4"
        # ViralPlasmid
        File  metaAssembly_contig = metaAssembly_call.contig
        Map[String, Boolean] virusPlasmid_options = {
            "default": true,
            "relaxed": false,
            "conservative": false,
            "custom": false
        }
        String virusPlasmid_outdir
        Int    virusPlasmid_cpu=8
        String virusPlasmid_database_location="/refdata"
        # MetaAnnotation
        String  metaAnnotation_imgap_project_id
        Int     metaAnnotation_additional_threads=8
        String  metaAnnotation_database_location="/refdata/img/"
        String  metaAnnotation_outdir
        String  metaAnnotation_opaver_web_path="/expanse/projects/nmdc/edge_app/nmdc-edge/io/opaver_web/data"
        # metaMAGS
        String  metaMAGs_proj
        File    metaMAGs_contig_file = metaAnnotation_call.renamed_fasta
        File    metaMAGs_sam_file = metaAssembly_call.bam
        File    metaMAGs_gff_file = metaAnnotation_call.functional_gff
        File    metaMAGs_proteins_file = metaAnnotation_call.proteins_faa
        File    metaMAGs_cog_file = metaAnnotation_call.cog_gff
        File    metaMAGs_ec_file = metaAnnotation_call.ec_tsv
        File    metaMAGs_ko_file = metaAnnotation_call.ko_tsv
        File    metaMAGs_pfam_file = metaAnnotation_call.pfam_gff
        File    metaMAGs_tigrfam_file = metaAnnotation_call.tigrfam_gff
        File    metaMAGs_crispr_file = metaAnnotation_call.crt_crisprs
        File    metaMAGs_cath_funfam_file = metaAnnotation_call.cath_funfam_gff
        File    metaMAGs_smart_file = metaAnnotation_call.smart_gff
        File    metaMAGs_supfam_file = metaAnnotation_call.supfam_gff
        File    metaMAGs_product_names_file = metaAnnotation_call.product_names_tsv
        File    metaMAGs_gene_phylogeny_file = metaAnnotation_call.gene_phylogeny_tsv
        File    metaMAGs_lineage_file = metaAnnotation_call.lineage_tsv
        File?   metaMAGs_map_file = metaAnnotation_call.map_file
        File?   metaMAGs_domain_file
        Int     metaMAGs_cpu=16
        Int     metaMAGs_threads=64
        Int     metaMAGs_pthreads=1
        String  metaMAGs_database="/refdata/GTDBTK_DB/gtdbtk_release207_v2"
        String  checkm_db="/refdata/CheckM_DB/checkm_data_2015_01_16"
        String  eukcc2_db="/refdata/EUKCC2_DB/eukcc2_db_ver_1.2"
        String  metaMAGs_outdir
        String  metaMAGs_container = "microbiomedata/nmdc_mbin@sha256:57930406fb5cc364bacfc904066519de6cdc2d0ceda9db0eebf2336df3ef5349"
        # finish
        String informed_by = "gold:GpXXXXXXX"
        String resource = "SDSC - Expanse"
        String url_root = "https://nmdc-edge.org/projects/"
        String url_base = url_root + sub(proj, "[^A-Za-z0-9]", "_") + "/output/"
        String git_url = "https://gitlab.com/edge-lanl/nmdc-edge"
    }
    
    call start {
        input: container="microbiomedata/workflowmeta:1.0.5.1"
    }

    call readsqc_preprocess.readsqc_preprocess as readsqc_preprocess {
        input:
            input_files=input_files,
            input_fq1=input_fq1,
            input_fq2=input_fq2,
            outdir=readsQC_outdir,
            input_interleaved=input_interleaved
    }

    scatter (file in select_first([readsqc_preprocess.input_files_gz, [""]])) {
        call readsQC.ShortReadsQC  as nmdc_rqcfilter_call {
            input:
                input_files=input_files,
                input_fq1=input_fq1,
                input_fq2=input_fq2,
                proj=proj,
                interleaved=input_interleaved
        }
    }

    call readsqc_output.readsqc_output as readsqc_output {
        input:
          input_files = rqcfiltered_reads,
          input_files_prefix = select_first([readsqc_preprocess.input_files_prefix, [""]]),
          filtered_stats_final = nmdc_rqcfilter_call.filtered_stats_final,
          filtered_stats2_final = nmdc_rqcfilter_call.filtered_stats2_final,
          filtered_stat_json = nmdc_rqcfilter_call.filter_stat_json,
          rqc_info = nmdc_rqcfilter_call.rqc_info, 
          outdir=readsQC_outdir,
          vis_container=readsQC_vis_container
    }

    call readbasedanalysis_preprocess.preprocess as readbased_preprocess {
        input:
            input_files=rqcfiltered_reads,
            paired=readbasedAnalysis_paired
	}

    call readbasedAnalysis.ReadbasedAnalysis as ReadbasedAnalysis_call {
        input:
            db_gottcha2=db_gottcha2, 
            db_kraken2=db_kraken2, 
            db_centrifuge=db_centrifuge,
            input_file= select_first([readbased_preprocess.input_file_gz, [""]]),
            proj=readbasedAnalysis_prefix,
            paired=readbasedAnalysis_paired,
            bbtools_container=readsQC_bbtools_container,
            docker=ReadbasedAnalysis_container
    }

     call readbasedAnalysis_output.readbasedAnalysis_output as ReadbasedAnalysis_output {
        input: 
            outdir=readbasedAnalysis_outdir,
            gottcha2_report_tsv=ReadbasedAnalysis_call.final_gottcha2_report_tsv, 
            gottcha2_full_tsv=ReadbasedAnalysis_call.final_gottcha2_full_tsv,
            gottcha2_krona_html=ReadbasedAnalysis_call.final_gottcha2_krona_html, 
            kraken2_report_tsv=ReadbasedAnalysis_call.final_kraken2_report_tsv,
            kraken2_classification_tsv=ReadbasedAnalysis_call.final_kraken2_classification_tsv, 
            kraken2_krona_html=ReadbasedAnalysis_call.final_kraken2_krona_html,
            centrifuge_report_tsv=ReadbasedAnalysis_call.final_centrifuge_report_tsv,
            centrifuge_classification_tsv=ReadbasedAnalysis_call.final_centrifuge_classification_tsv,
            centrifuge_krona_html=ReadbasedAnalysis_call.final_centrifuge_krona_html, 
            PREFIX=readbasedAnalysis_prefix
    }

    call metaAssembly.nmdc_edge_assembly as metaAssembly_call {
        input:
            memory=metaAssembly_memory,
            threads=metaAssembly_threads,
            input_file=rqcfiltered_reads,
            input_fq1=input_fq1,
            input_fq2=input_fq2,
            input_interleaved = true,
            outdir=metaAssembly_outdir,
            proj=proj,
            bbtools_container=metaAssembly_bbtools_container
    }

    call viralPlasmid.viral as viralPlasmid_call {
        input:
            fasta=metaAssembly_contig,
            outdir=virusPlasmid_outdir,
            option=virusPlasmid_options,
            cpu=virusPlasmid_cpu,
            database=virusPlasmid_database_location
    }

    call metaAnnotation.annotation as metaAnnotation_call {
        input:
            proj=metaAnnotation_imgap_project_id,
            input_file=metaAssembly_contig,
            imgap_project_id=metaAnnotation_imgap_project_id,
            additional_threads=metaAnnotation_additional_threads,
            database_location=metaAnnotation_database_location
    }

    call metaAnnotationOutput.annotation_output as annotation_output {
        input:
            imgap_project_type=metaAnnotation_imgap_project_id,
            final_stats_tsv=metaAnnotation_call.stats_tsv,
            functional_gff=metaAnnotation_call.functional_gff,
            opaver_web_path=metaAnnotation_opaver_web_path,
            outdir=metaAnnotation_outdir
  }

    call metaMAGs.nmdc_mags as metaMAGs_call {
        input:
            proj=metaMAGs_proj,
            contig_file=metaMAGs_contig_file,
            sam_file=metaMAGs_sam_file,
            gff_file=metaMAGs_gff_file,
            proteins_file=metaMAGs_proteins_file,
            cog_file=metaMAGs_cog_file,
            ec_file=metaMAGs_ec_file,
            ko_file=metaMAGs_ko_file,
            pfam_file=metaMAGs_pfam_file,
            tigrfam_file=metaMAGs_tigrfam_file,
            crispr_file=metaMAGs_crispr_file,
            product_names_file=metaMAGs_product_names_file,
            gene_phylogeny_file=metaMAGs_gene_phylogeny_file,
            lineage_file=metaMAGs_lineage_file,
            map_file=metaMAGs_map_file,
            scratch_dir=metaMAGs_outdir,
            cpu=metaMAGs_cpu,
            threads=metaMAGs_threads,
            pthreads=metaMAGs_pthreads,
            gtdbtk_db=metaMAGs_database,
            checkm_db=checkm_db,
            eukcc2_db=eukcc2_db
    }
    call metaMAGsOutput.pdf_to_png as metaMAGs_vis {
        input:
            outdir = metaMAGs_outdir,
            pdf_files = [metaMAGs_call.barplot,metaMAGs_call.heatmap]
    }

    call finish {
        input: 
            container="microbiomedata/workflowmeta:1.0.5.1",
            proj= metaAssembly_rename_contig_prefix,
            start=start.start,
            resource=resource,
            url_base=url_base,
            git_url=git_url,
            informed_by=informed_by,
            read = if (input_interleaved) then input_files else flatten([input_fq1,input_fq2]),
            filtered = nmdc_rqcfilter_call.filtered_final,
            filtered_stats = nmdc_rqcfilter_call.filtered_stats_final,
            filtered_stats2 = nmdc_rqcfilter_call.filtered_stats2_final,
            fasta=metaAssembly_contig,
            scaffold=metaAssembly_call.scaffold,
            agp=metaAssembly_call.agp,
            bam=metaAssembly_call.bam,
            covstats=metaAssembly_call.covstats,
            asmstats=metaAssembly_call.asmstats,
            proteins_faa=metaAnnotation_call.proteins_faa,
            functional_gff=metaAnnotation_call.functional_gff,
            structural_gff=metaAnnotation_call.structural_gff,
            ko_tsv=metaAnnotation_call.ko_tsv,
            ec_tsv=metaAnnotation_call.ec_tsv,
            cog_gff=metaAnnotation_call.cog_gff,
            pfam_gff=metaAnnotation_call.pfam_gff,
            tigrfam_gff=metaAnnotation_call.tigrfam_gff,
            smart_gff=metaAnnotation_call.smart_gff,
            supfam_gff=metaAnnotation_call.supfam_gff,
            cath_funfam_gff=metaAnnotation_call.cath_funfam_gff,
            crt_gff=metaAnnotation_call.crt_gff,
            genemark_gff=metaAnnotation_call.genemark_gff,
            prodigal_gff=metaAnnotation_call.prodigal_gff,
            trna_gff=metaAnnotation_call.trna_gff,
            crt_crisprs=metaAnnotation_call.crt_crisprs,
            product_names_tsv=metaAnnotation_call.product_names_tsv,
            gene_phylogeny_tsv=metaAnnotation_call.gene_phylogeny_tsv,
            ko_ec_gff=metaAnnotation_call.ko_ec_gff,
            stats_tsv=metaAnnotation_call.stats_tsv,
            # stats_json=metaAnnotation_call.stats_json,
            gottcha2_report_tsv = ReadbasedAnalysis_call.final_gottcha2_report_tsv,
            gottcha2_full_tsv = ReadbasedAnalysis_call.final_gottcha2_full_tsv,
            gottcha2_krona_html = ReadbasedAnalysis_call.final_gottcha2_krona_html,
            centrifuge_classification_tsv = ReadbasedAnalysis_call.final_centrifuge_classification_tsv,
            centrifuge_report_tsv = ReadbasedAnalysis_call.final_centrifuge_report_tsv,
            centrifuge_krona_html = ReadbasedAnalysis_call.final_centrifuge_krona_html,
            kraken2_classification_tsv = ReadbasedAnalysis_call.final_kraken2_classification_tsv,
            kraken2_report_tsv = ReadbasedAnalysis_call.final_kraken2_report_tsv,
            kraken2_krona_html = ReadbasedAnalysis_call.final_kraken2_krona_html,
            summary_json = ReadbasedAnalysis_output.summary_json,
            final_hqmq_bins_zip = metaMAGs_call.final_hqmq_bins_zip,
            final_lq_bins_zip = metaMAGs_call.final_lq_bins_zip,
            final_lq_bins_zip = metaMAGs_call.final_lq_bins_zip,
            final_gtdbtk_ar_summary = metaMAGs_call.final_gtdbtk_ar_summary,
            short=metaMAGs_call.short,
            low =metaMAGs_call.low,
            final_unbinned_fa=metaMAGs_call.final_unbinned_fa,
            final_checkm=metaMAGs_call.final_checkm,
            mags_version=metaMAGs_call.mags_version,
            final_stats_json=metaMAGs_call.final_stats_json,
            barplot=metaMAGs_call.barplot,
            heatmap=metaMAGs_call.heatmap,
            kronaplot=metaMAGs_call.kronaplot,
            qadir=readsQC_outdir,
            assemdir=metaAssembly_outdir,
            annodir=metaAnnotation_outdir,
            magsdir=metaMAGs_outdir,
            rbadir=readbasedAnalysis_outdir
    }
}

task start {
    input {
        String container
    }

    command <<<
        set -euo pipefail
        # Capture the start time
        date --iso-8601=seconds > start.txt
    >>>

    output{
        String start = read_string("start.txt")
        File start_file = "start.txt"
    }

    runtime {
        memory: "1 GiB"
        cpu:  1
        maxRetries: 1
        docker: container
    }
}

task finish {
    input {
        String container
        String proj
        String prefix=sub(proj, ":", "_")
        String start
        String informed_by
        String resource
        String url_base
        String git_url
        Array[File] read
        Array[File] filtered
	    Array[File] filtered_stats
	    Array[File] filtered_stats2
        File? fasta
        File? scaffold
        File? agp
        File? bam
        File? covstats
        File? asmstats
        File? proteins_faa
        File? structural_gff
        File? functional_gff
        File? ko_tsv
        File? ec_tsv
        File? cog_gff
        File? pfam_gff
        File? tigrfam_gff
        File? smart_gff
        File? supfam_gff
        File? cath_funfam_gff
        File? crt_gff
        File? genemark_gff
        File? prodigal_gff
        File? trna_gff
        File? rrna_gff
        File? ncrna_tmrna_gff
        File? ko_ec_gff
        File? stats_tsv
        File? stats_json
        File? gene_phylogeny_tsv
        File? product_names_tsv
        File? crt_crisprs
        File? final_hqmq_bins_zip
        File? final_lq_bins_zip
        File? final_gtdbtk_bac_summary
        File? final_gtdbtk_ar_summary
        File? short
        File? low
        File? final_unbinned_fa
        File? final_checkm
        File? mags_version
        File? final_stats_json
        File? barplot
        File? heatmap
        File? kronaplot
        File? gottcha2_report_tsv
        File? gottcha2_full_tsv
        File? gottcha2_krona_html
        File? centrifuge_classification_tsv
        File? centrifuge_report_tsv
        File? centrifuge_krona_html
        File? kraken2_classification_tsv
        File? kraken2_report_tsv
        File? kraken2_krona_html
        File? summary_json
        String qadir="ReadsQC/"
        String assemdir="MetagenomeAssembly/"
        String annodir="MetagenomeAnnotation/"
        String magsdir="MetagenomeMAGs/"
        String rbadir="ReadbasedAnalysis/"
        String sed_bin="s/bins./~{prefix}_/g"
        String dollar ="$"
    }

    command <<<
        set -euo pipefail
        mkdir -p ~{annodir}
        mkdir -p ~{assemdir}
        mkdir -p ~{qadir}
        mkdir -p ~{annodir}
        mkdir -p ~{rbadir}
        mkdir -p ~{magsdir}
        end=`date --iso-8601=seconds`

            # Generate assembly objects
            /scripts/generate_objects.py --type "assembly" --id ~{informed_by} \
                --name "Assembly Activity for ~{proj}" --part ~{proj} \
                --start ~{start} --end $end \
                --resource '~{resource}' --url ~{url_base} --giturl ~{git_url} \
                --inputs ~{sep=" " filtered} \
                --outputs \
                ~{covstats} 'Metagenome Contig Coverage Stats' \
                ~{fasta} 'Assembled contigs fasta' \
                ~{scaffold} 'Assembled scaffold fasta' \
                ~{agp} 'Assembled AGP file' \
                ~{bam} 'Metagenome Alignment BAM file'
            cp ~{fasta} ~{scaffold} ~{agp} ~{bam} ~{covstats} ~{asmstats} activity.json data_objects.json ~{assemdir}/

            # Generate annotation objects
            nmdc gff2json ~{functional_gff} -of features.json -oa annotations.json -ai ~{informed_by}

            /scripts/generate_objects.py --type "annotation" --id ~{informed_by} \
                --name "Annotation Activity for ~{proj}" --part ~{proj} \
                --start ~{start} --end $end \
                --resource '~{resource}' --url ~{url_base} --giturl ~{git_url} \
                --inputs ~{fasta} \
                --outputs \
                ~{proteins_faa} 'Protein FAA' \
                ~{structural_gff} 'Structural annotation GFF file' \
                ~{functional_gff} 'Functional annotation GFF file' \
                ~{ko_tsv} 'KO TSV file' \
                ~{ec_tsv} 'EC TSV file' \
                ~{cog_gff} 'COG GFF file' \
                ~{pfam_gff} 'PFAM GFF file' \
                ~{tigrfam_gff} 'TigrFam GFF file' \
                ~{smart_gff} 'SMART GFF file' \
                ~{supfam_gff} 'SuperFam GFF file' \
                ~{cath_funfam_gff} 'Cath FunFam GFF file' \
                ~{crt_gff} 'CRT GFF file' \
                ~{genemark_gff} 'Genemark GFF file' \
                ~{prodigal_gff} 'Prodigal GFF file' \
                ~{trna_gff} 'tRNA GFF File' \
                ~{crt_crisprs} 'CRISPRS file' \
                ~{product_names_tsv} 'Product Names tsv' \
                ~{gene_phylogeny_tsv} 'Gene Phylogeny tsv' \
                ~{ko_ec_gff} 'KO_EC GFF file'

            #cp ~{proteins_faa} ~{structural_gff} ~{functional_gff} \
            #	~{ko_tsv} ~{ec_tsv} ~{cog_gff} ~{pfam_gff} ~{tigrfam_gff} \
            #	~{smart_gff} ~{supfam_gff} ~{cath_funfam_gff} ~{ko_ec_gff} \
            #	~{stats_tsv} ~{stats_json} \
            #	~{annodir}/
            cp features.json annotations.json activity.json data_objects.json ~{annodir}/

            cp activity.json data_objects.json ~{final_hqmq_bins_zip} \
            ~{final_lq_bins_zip} ~{final_gtdbtk_bac_summary} ~{final_gtdbtk_ar_summary} ~{short} ~{low} \
            ~{final_unbinned_fa} ~{final_checkm} ~{mags_version} ~{final_stats_json} ~{barplot} ~{heatmap} \
            ~{kronaplot} ~{magsdir}/

            # ReadbasedAnalysis objects
            # mkdir -p ~{rbadir}/gottcha2/
            # mkdir -p ~{rbadir}/centrifuge/
            # mkdir -p ~{rbadir}/kraken2/
            # /scripts/generate_objects.py --type "ReadbasedAnalysis" --id ~{informed_by} \
            #    --name "ReadBased Analysis Activity for ~{proj}" --part ~{proj} \
            #    --start ~{start} --end $end \
            #    --resource '~{resource}' --url ~{url_base} --giturl ~{git_url} \
            #    --inputs ~{sep=" " filtered} \
            #    --outputs \
            #    ~{gottcha2_report_tsv} "Gottcha2 TSV report" \
            #    ~{gottcha2_full_tsv} "Gottcha2 full TSV report" \
            #    ~{gottcha2_krona_html} "Gottcha2 Krona HTML report" \
            #    ~{centrifuge_classification_tsv} "Centrifuge classification TSV report" \
            #    ~{centrifuge_report_tsv} "Centrifuge TSV report" \
            #    ~{centrifuge_krona_html} "Centrifuge Krona HTML report" \
            #    ~{kraken2_classification_tsv} "Kraken classification TSV report" \
            #    ~{kraken2_report_tsv} "Kraken2 TSV report" \
            #    ~{kraken2_krona_html} "Kraken2 Krona HTML report"

            # cp activity.json data_objects.json ~{summary_json} ~{rbadir}/
            # cp ~{gottcha2_report_tsv} ~{gottcha2_full_tsv} ~{gottcha2_krona_html} ~{rbadir}/gottcha2/
            # cp ~{centrifuge_classification_tsv} ~{centrifuge_report_tsv} ~{centrifuge_krona_html} ~{rbadir}/centrifuge/
            # cp ~{kraken2_classification_tsv} ~{kraken2_report_tsv} ~{kraken2_krona_html} ~{rbadir}/kraken2/

    >>>

    runtime {
        memory: "60 GiB"
        cpu:  4
        maxRetries: 1
        docker: container
    }
}