"""
Test that the workflow inputs generated by the Cromwell job runner and the WDLs
specified in the workflow configuration are valid and can be submitted to a job runner.
"""
import json
import logging
import os
import pytest
import zipfile

from nmdc_automation.workflow_automation.wfutils import WorkflowStateManager

logging_level = os.getenv("NMDC_LOG_LEVEL", logging.INFO)
logging.basicConfig(
    level=logging_level, format="%(asctime)s %(levelname)s: %(message)s"
)

logger = logging.getLogger(__name__)

@pytest.mark.integration
@pytest.mark.parametrize(
    "fixture", ["rqc_workflow_state.json",
                "meta_assembly_workflow_state.json",
                "read_based_analysis_workflow_state.json",
                "mags_workflow_state.json",
                "annotation_workflow_state.json",
                "metat_rqc_workflow_state.json",
                "metat_assembly_workflow_state.json",
                "metat_annotation_workflow_state.json",
                "metat_expression_workflow_state.json"
                ]
    )
def test_workflow_inputs_and_wdl(site_config, fixtures_dir, fixture):
    """
    Test that the workflow submission files generated by the WorkflowStateManager are valid
    compared to the WDLs specified in the workflow configuration yaml file.

    This test requires that WOMtool be installed and available in the PATH.
    https://cromwell.readthedocs.io/en/stable/WOMtool/
    """


    job_state = json.load(open(fixtures_dir / fixture))
    state_manager = WorkflowStateManager(job_state)

    submission_files = state_manager.generate_submission_files(for_jaws=True)

    # For now, we have to manually unzip the sub workflow zip file
    if submission_files.get("sub"):
        extract_dir = os.path.dirname(submission_files["sub"])
        with zipfile.ZipFile(submission_files["sub"], 'r') as zip_ref:
            zip_ref.extractall(extract_dir)

    # Validate the WDLs and inputs using the WOMtool CLI womtool validate command
    wdl_file = submission_files["wdl_file"]
    inputs = submission_files["inputs"]

    # Validate the WDL
    wdl_validate_cmd = f"womtool validate {wdl_file} --inputs {inputs}"
    logger.info(f"Validating WDL: {wdl_file}")
    logger.info(f"Command: {wdl_validate_cmd}")
    os.system(wdl_validate_cmd)
